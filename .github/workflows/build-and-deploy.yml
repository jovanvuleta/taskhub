name: Build and Deploy

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: taskhub-backend
  FRONTEND_IMAGE_NAME: taskhub-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Test Backend
      working-directory: ./backend
      run: |
        go mod download
        go mod verify
        go vet ./...
        go test -v -race -coverprofile=coverage.out ./...

    - name: Test Frontend
      working-directory: ./frontend
      run: |
        npm install
        CI=true npm run test -- --coverage --passWithNoTests --watchAll=false

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service == 'backend' && env.BACKEND_IMAGE_NAME || env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service == 'backend' && env.BACKEND_IMAGE_NAME || env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://taskhub.dev' || 'https://staging.taskhub.dev' }}
    permissions:
      contents: read
      id-token: write  # For OIDC authentication with AWS
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "CLUSTER_NAME=production-cluster" >> $GITHUB_ENV
          echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN_PRODUCTION }}" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "CLUSTER_NAME=staging-cluster" >> $GITHUB_ENV
          echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN_STAGING }}" >> $GITHUB_ENV
        fi

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Install Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: us-east-1
        
    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-east-1 --name ${{ env.CLUSTER_NAME }}

    - name: Update image tags
      run: |
        cd k8s/overlays/${{ env.ENVIRONMENT }}
        # Update backend image tag
        kustomize edit set image taskhub-backend=ghcr.io/${{ github.repository_owner }}/taskhub-backend:${{ github.sha }}
        # Update frontend image tag
        kustomize edit set image taskhub-frontend=ghcr.io/${{ github.repository_owner }}/taskhub-frontend:${{ github.sha }}

    - name: Deploy
      run: |
        # Audit logging
        echo "üöÄ DEPLOYMENT AUDIT LOG" | tee -a deployment-audit.log
        echo "Environment: ${{ env.ENVIRONMENT }}" | tee -a deployment-audit.log  
        echo "Actor: ${{ github.actor }}" | tee -a deployment-audit.log
        echo "Commit: ${{ github.sha }}" | tee -a deployment-audit.log
        echo "Timestamp: $(date -u)" | tee -a deployment-audit.log
        echo "Images:" | tee -a deployment-audit.log
        echo "  Backend: ghcr.io/${{ github.repository_owner }}/taskhub-backend:${{ github.sha }}" | tee -a deployment-audit.log
        echo "  Frontend: ghcr.io/${{ github.repository_owner }}/taskhub-frontend:${{ github.sha }}" | tee -a deployment-audit.log
        echo "---" | tee -a deployment-audit.log
        
        # Deploy with verification
        kubectl apply -k k8s/overlays/${{ env.ENVIRONMENT }}
        kubectl rollout status deployment/backend -n ${{ env.ENVIRONMENT }} --timeout=300s
        kubectl rollout status deployment/frontend -n ${{ env.ENVIRONMENT }} --timeout=300s
        
        # Verify deployment
        kubectl get pods -n ${{ env.ENVIRONMENT }}
        echo "‚úÖ ${{ env.ENVIRONMENT }} deployment completed successfully" | tee -a deployment-audit.log

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "‚úÖ Deployment successful"
        else
          echo "‚ùå Deployment failed"
          exit 1
        fi